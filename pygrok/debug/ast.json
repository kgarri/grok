{
    "type": "Program",
    "statements": [
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "test"
                },
                "return_type": "int",
                "parameters": [],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "InfixExpression",
                                "left_node": {
                                    "type": "IntegerLiteral",
                                    "value": 69
                                },
                                "operator": "%",
                                "right_node": {
                                    "type": "IntegerLiteral",
                                    "value": 60
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "main"
                },
                "return_type": "int",
                "parameters": [],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "LetStatement",
                            "name": {
                                "type": "IdentifierLiteral",
                                "value": "a"
                            },
                            "value": {
                                "type": "IntegerLiteral",
                                "value": 3
                            },
                            "value_type": "int"
                        },
                        {
                            "type": "ExpressionStatement",
                            "expr": {
                                "type": "IfStatement",
                                "condition": {
                                    "type": "InfixExpression",
                                    "left_node": {
                                        "type": "IdentifierLiteral",
                                        "value": "a"
                                    },
                                    "operator": "==",
                                    "right_node": {
                                        "type": "IntegerLiteral",
                                        "value": 4
                                    }
                                },
                                "consequence": {
                                    "type": "BlockStatement",
                                    "statements": [
                                        {
                                            "type": "AssignStatement",
                                            "ident": {
                                                "type": "IdentifierLiteral",
                                                "value": "a"
                                            },
                                            "right_value": {
                                                "type": "InfixExpression",
                                                "left_node": {
                                                    "type": "IdentifierLiteral",
                                                    "value": "a"
                                                },
                                                "operator": "*",
                                                "right_node": {
                                                    "type": "IntegerLiteral",
                                                    "value": 2
                                                }
                                            }
                                        }
                                    ]
                                },
                                "alternative": {
                                    "type": "IfStatement",
                                    "condition": {
                                        "type": "InfixExpression",
                                        "left_node": {
                                            "type": "IdentifierLiteral",
                                            "value": "a"
                                        },
                                        "operator": "==",
                                        "right_node": {
                                            "type": "IntegerLiteral",
                                            "value": 3
                                        }
                                    },
                                    "consequence": {
                                        "type": "BlockStatement",
                                        "statements": [
                                            {
                                                "type": "AssignStatement",
                                                "ident": {
                                                    "type": "IdentifierLiteral",
                                                    "value": "a"
                                                },
                                                "right_value": {
                                                    "type": "InfixExpression",
                                                    "left_node": {
                                                        "type": "IdentifierLiteral",
                                                        "value": "a"
                                                    },
                                                    "operator": "*",
                                                    "right_node": {
                                                        "type": "IntegerLiteral",
                                                        "value": 3
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "alternative": {
                                        "type": "BlockStatement",
                                        "statements": [
                                            {
                                                "type": "AssignStatement",
                                                "ident": {
                                                    "type": "IdentifierLiteral",
                                                    "value": "a"
                                                },
                                                "right_value": {
                                                    "type": "InfixExpression",
                                                    "left_node": {
                                                        "type": "IdentifierLiteral",
                                                        "value": "a"
                                                    },
                                                    "operator": "/",
                                                    "right_node": {
                                                        "type": "IntegerLiteral",
                                                        "value": 2
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "CallExpression",
                                "function": {
                                    "type": "IdentifierLiteral",
                                    "value": "test"
                                },
                                "arguments": []
                            }
                        }
                    ]
                }
            }
        }
    ]
}
