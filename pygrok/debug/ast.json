{
    "type": "Program",
    "statements": [
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "testFunction"
                },
                "return_type": "int",
                "parameters": [],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "IntegerLiteral",
                                "value": 5
                            }
                        }
                    ]
                }
            }
        },
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "add"
                },
                "return_type": "int",
                "parameters": [
                    {
                        "type": "FunctionParameter",
                        "name": "a",
                        "value_type": "int"
                    },
                    {
                        "type": "FunctionParameter",
                        "name": "b",
                        "value_type": "int"
                    }
                ],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "InfixExpression",
                                "left_node": {
                                    "type": "IdentifierLiteral",
                                    "value": "a"
                                },
                                "operator": "+",
                                "right_node": {
                                    "type": "IdentifierLiteral",
                                    "value": "b"
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "mul"
                },
                "return_type": "int",
                "parameters": [
                    {
                        "type": "FunctionParameter",
                        "name": "a",
                        "value_type": "int"
                    },
                    {
                        "type": "FunctionParameter",
                        "name": "b",
                        "value_type": "int"
                    }
                ],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "InfixExpression",
                                "left_node": {
                                    "type": "IdentifierLiteral",
                                    "value": "a"
                                },
                                "operator": "*",
                                "right_node": {
                                    "type": "IdentifierLiteral",
                                    "value": "b"
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "fib"
                },
                "return_type": "int",
                "parameters": [
                    {
                        "type": "FunctionParameter",
                        "name": "n",
                        "value_type": "int"
                    }
                ],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "ExpressionStatement",
                            "expr": {
                                "type": "IfStatement",
                                "condition": {
                                    "type": "InfixExpression",
                                    "left_node": {
                                        "type": "IdentifierLiteral",
                                        "value": "n"
                                    },
                                    "operator": "<",
                                    "right_node": {
                                        "type": "IntegerLiteral",
                                        "value": 2
                                    }
                                },
                                "consequence": {
                                    "type": "BlockStatement",
                                    "statements": [
                                        {
                                            "type": "ReturnStatement",
                                            "return_value": {
                                                "type": "IntegerLiteral",
                                                "value": 1
                                            }
                                        }
                                    ]
                                },
                                "alternative": "None"
                            }
                        },
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "InfixExpression",
                                "left_node": {
                                    "type": "CallExpression",
                                    "function": {
                                        "type": "IdentifierLiteral",
                                        "value": "fib"
                                    },
                                    "arguments": [
                                        {
                                            "type": "InfixExpression",
                                            "left_node": {
                                                "type": "IdentifierLiteral",
                                                "value": "n"
                                            },
                                            "operator": "-",
                                            "right_node": {
                                                "type": "IntegerLiteral",
                                                "value": 1
                                            }
                                        }
                                    ]
                                },
                                "operator": "+",
                                "right_node": {
                                    "type": "CallExpression",
                                    "function": {
                                        "type": "IdentifierLiteral",
                                        "value": "fib"
                                    },
                                    "arguments": [
                                        {
                                            "type": "InfixExpression",
                                            "left_node": {
                                                "type": "IdentifierLiteral",
                                                "value": "n"
                                            },
                                            "operator": "-",
                                            "right_node": {
                                                "type": "IntegerLiteral",
                                                "value": 2
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        {
            "FunctionStatement": {
                "type": "FunctionStatement",
                "name": {
                    "type": "IdentifierLiteral",
                    "value": "main"
                },
                "return_type": "int",
                "parameters": [],
                "body": {
                    "type": "BlockStatement",
                    "statements": [
                        {
                            "type": "LetStatement",
                            "name": {
                                "type": "IdentifierLiteral",
                                "value": "testStr"
                            },
                            "value": {
                                "type": "StringLiteral",
                                "value": "Hello "
                            },
                            "value_type": "string"
                        },
                        {
                            "type": "LetStatement",
                            "name": {
                                "type": "IdentifierLiteral",
                                "value": "testStr2"
                            },
                            "value": {
                                "type": "StringLiteral",
                                "value": "World!"
                            },
                            "value_type": "string"
                        },
                        {
                            "type": "ExpressionStatement",
                            "expr": {
                                "type": "CallExpression",
                                "function": {
                                    "type": "IdentifierLiteral",
                                    "value": "printf"
                                },
                                "arguments": [
                                    {
                                        "type": "CallExpression",
                                        "function": {
                                            "type": "IdentifierLiteral",
                                            "value": "concat"
                                        },
                                        "arguments": [
                                            {
                                                "type": "IdentifierLiteral",
                                                "value": "testStr"
                                            },
                                            {
                                                "type": "IdentifierLiteral",
                                                "value": "testStr2"
                                            }
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "type": "LetStatement",
                            "name": {
                                "type": "IdentifierLiteral",
                                "value": "a"
                            },
                            "value": {
                                "type": "CallExpression",
                                "function": {
                                    "type": "IdentifierLiteral",
                                    "value": "testFunction"
                                },
                                "arguments": []
                            },
                            "value_type": "int"
                        },
                        {
                            "type": "LetStatement",
                            "name": {
                                "type": "IdentifierLiteral",
                                "value": "b"
                            },
                            "value": {
                                "type": "IntegerLiteral",
                                "value": 9
                            },
                            "value_type": "int"
                        },
                        {
                            "type": "ExpressionStatement",
                            "expr": {
                                "type": "IfStatement",
                                "condition": {
                                    "type": "InfixExpression",
                                    "left_node": {
                                        "type": "IdentifierLiteral",
                                        "value": "a"
                                    },
                                    "operator": ">=",
                                    "right_node": {
                                        "type": "IntegerLiteral",
                                        "value": 5
                                    }
                                },
                                "consequence": {
                                    "type": "BlockStatement",
                                    "statements": [
                                        {
                                            "type": "AssignStatement",
                                            "ident": {
                                                "type": "IdentifierLiteral",
                                                "value": "a"
                                            },
                                            "right_value": {
                                                "type": "IntegerLiteral",
                                                "value": 10
                                            }
                                        }
                                    ]
                                },
                                "alternative": {
                                    "type": "BlockStatement",
                                    "statements": [
                                        {
                                            "type": "AssignStatement",
                                            "ident": {
                                                "type": "IdentifierLiteral",
                                                "value": "a"
                                            },
                                            "right_value": {
                                                "type": "IntegerLiteral",
                                                "value": 1
                                            }
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "type": "ReturnStatement",
                            "return_value": {
                                "type": "CallExpression",
                                "function": {
                                    "type": "IdentifierLiteral",
                                    "value": "fib"
                                },
                                "arguments": [
                                    {
                                        "type": "IdentifierLiteral",
                                        "value": "a"
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    ]
}